cs336_Notes

Introduction to SQL
SQL:
	-very-high-level language
	-avoid a lot of data-manipulation details needed in procedural
	languages like java and C++
	-declarative vs procedural
	-Database management system figures out 'best' way to execute
	query -- this is call 'query optimization' --

Monotonic queries -- Three-liners:
	SELECT desired attributes
	FROM one or more tables
	WHERE condition about tuples of tables

All our SQL queries will be based on the following database schema.
	(key attribute has a (!) next to it)

	Beers(name(!), manf)
	Bars(name(!), addr, license)
	Drinkers(name(!), addr, phone)
	Likes(drinker(!), beer(!))
	Sells(bar(!), beer(!), price)
	Frequents(drinker(!), bar(!))

Using Beers(name, manf), what beers are made by Anheuser-Busch?
	SELECT name
	FROM  Beers
	WHERE manf = 'Anheuser-Busch';

	Result:
	|name    |
	---------
	|Bud     |
	|Bud Lite|
	|Michelob|
	|.....   |

Meaning of Single-Relation Query
	Begin with the relation in the FROM clause
	Apply the selection indicate by the WHERE clause
	Apply the extended projection indicated by the SELECT clause

Can also think of it as a for loop. 
For tuple t in Beers check if current manf = 'Anheuser-Busch', if 
yes, select the clause using the components of this tuple

You can rename an attribute in a select clause with "AS <new name>"
and you can also perform operations on thins.

Example (Using Sells(bar, beer, price)):

	SELECT bar, beer, price*114 AS priceInYen
	FROM Sells;

You can also use logical AND, OR and NOT. Also, <, >, <=, >=, =

Can also do Pattern matching: 
	<Attribute> LIKE <pattern> OR
	<Attribute> NOT LIKE <pattern>

Pattern: is a quoted string with % = 'any string'; = 'any 
character'

* = wild card
<> = not equal
Escape characters seem to be doubling them. Example:
	SELECT price
	FROM Sells
	WHERE bar = 'Joe''s Bar' AND beer = 'Bud';

What does this do:
	SELECT bar FROM Sells WHERE beer <> 'Heineken'
This returns a list of bars that sell at lease one beer 
that is not Heineken

If we want all the bars that do not sell Heineken we need
to find all the beers that do and subtract them from the whole

What does this do?
	SELECT drinker FROM Likes WHERE beer = 'Corona' AND beer = 
	'Bud'
This does nothing because the beer is only a single string and 
this statement must be two different strings at the same time.

LIKE Example:
Using Drinkers(name, addr, phone) find the drinkers with exchange
555:
	SELET name
	FROM Drinker
	WHERE phone LIKE '%555-_ _ _ _';

Multinational Queries:
Interesting queries often combine data from more than one
relations.
JOIN is the way to combine different tables and see what is common
between them.

Example: Joining Two Relations
Using relations Likes(drinker, beer) and Frequents(drinker, bar)
find the beers like by at lease one person who frequents Joe's bar

	SELECT beer
	FROM Likes, Frequents
	WHERE bar = 'Joe''s Bar' AND Frequents.drinker =
		Likes.drinker;

Apparently this isn't the fastest way to solve this problem 
though because this is doing a whole 'Cartesian product'

Other way to do it:
	Select L.beer
	FROM Likes L JOIN Frequents F ON L.drinker=F.drinker
	WHERE F.bar='Joe''s'

Example Self-Join:

From Beers(name, manf) find all pairs of beers by the same
manufacturer
Also do not produce pairs like (Bud, Bud)
Produce pairs in alphabetic order like: (Bud, Miller)

SELECT b1.name, b2.name
FROM Beers b1, Beers b2
WHERE...

Subquery:
You can add another query inside of a query

Query + Subquery Solution
SELECT bar
FROM Sells
WHERE beer = 'Miller' and price = (SELECT price
									FROM Sells
									WHERE bar = 'Joe''s Bar'
									AND beer = 'Bud');

The IN Operator
<tuple> in (<subquery>)

SELECT * FROM Beers WHERE name IN (SELECT beer
									FROM Likes
									WHERE drinker = 'Fred');

9/13 Lecture Notes:
What does this query return?

SELECT L1.drinker
FROM Likes L1, Likes L2
WHERE L1.drinker=L2.drinker AND
	NOT(L1.beer=L2.beer)

Ans: Drinkers who like at least two beers

Example: In
Using Beers and Likes find the name of the manuf of each beer that
Fred likes

SELECT *
FROM Beers
WHERE Name IN (SELECT beer
				FROM Likes
				WHERE drinker = 'Fred')

OR we can do it with a join

SELECT a
FROM R, S
WHERE R.b = S.b;

The Exists Operator:
EXSISTS(<subquery>)

Example:
SELECT name
FROM Beers b1
WHERE NOT EXISTS(
	SELECT *
	FROM Beers
	WHERE manf = b1.manf AND
		Name <> b1.name);

This is looking for manufacturers that make more that one beer

Question: what does this query return?

SELECT s.bar FROM sells s
WHERE (s.beer = 'Corona') OR (s.beer='Bud') AND
NOT EXSISTS( SELECT s1.bar
			 FROM sells s1, sells s2
			 WHERE (s1.beer = 'Corona') AND (s2.beer = 'Bud')
			 AND (s.bar = s1.bar) AND (s.bar = s2.bar))

Ans: Bars which server Corona or Bud, but not both

Keyword: All
From sells find the beers sold for the highest price

SELECT beer
FROM sells
WHERE price >= ALL(SELECT price FROM sells)

Keyword: UNION
Union, intersection and difference of relations are
expressed by the following forms. Each involving subqueries
(<subQ>) UNION (<subQ>)

What does this Query return?
SELECT b.name
FROM bar B
WHERE NOT EXSISTS (SELECT * FROM frequents F
				   WHERE f.bar = b.name)

Ans: Bars which are not frequented by anybody

Bag Semantics:
SELECT-FROM-WHERE statements use bag semantics, but the default
union, intersections and difference is set semantics -- that is
duplicates are eliminated as the operation is applied

Force results to be a set by: SELECT DISTINCT
Force results to be a bad (i.e., don't elmin dups) by ALL,
as in ...UNION ALL...

Example DISTINCT:
From sells find all prices charged for beers:

SELECT DISTINCT price
FROM sells

Without distinct each price would be listed as many times
as there were bar/beer pairs at that price

Join Expressions:
SQL provides several versions of bag joins
These expressions can be stand-alone queries or used in 
place of relation in a FROM cause

Products and Natural Joins

Natural join:
	R NATURAL JOIN S;

Product:
	R CROSS JOIN S;

Example:
	Likes NATURAL JOIN sells

Relations can be parenthesized subqueries as well

Theta Join:
R JOIN S ON <condition>

Simple stuff:
Easy queries (three liners SELECT-FROM-WHERE)

Not-So-Simple:
The word Only implies negation so we can't do it in just three
lines
"Not Exists" is another sign that you'll need a negation and 
possibly even a 'not exists' statement

Monotonic vs Non-Monotonic Test:

Easy query: The bigger the database the bigger the answer
Hard query: The size of the database doesn't necessarily 
increase the size of the answer Example: List the students
not taking databases. If we increase the database by 10 million
students, but they're all taking databases then the size of the 
answer doesn't change.

Outerjoins:

R OUTER JOIN S is the core of an outerjoin expression. It is
modified by:
1. Optional NATURAL in front of OUTER
2. Optional ON <condition> after JOIN
3. Optional LEFT, RIGHT, or FULL before OUTER
	LEFT = pad dangling tuples of R only
	RIGHT = pad dangling tuples of S only
	FULL = pad both; this choice is the default 